/* ###################################################################
**     Filename    : main.c
**     Project     : Project
**     Processor   : MK70FN1M0VMJ12
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-07-20, 13:27, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 4.0
** @brief
**         Main module.
**         This module contains user's application code.
*/
/*!
**  @addtogroup main_module main module documentation
**  @{
*/
/* MODULE main */


// CPU module - contains low level hardware initialization routines
#include "Cpu.h"
#include "Events.h"
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "types.h"

#include "FIFO.h"
#include "packet.h"
#include "UART.h"
#include "Flash.h"
#include "LEDs.h"
#include "PIT.h"
#include "OS.h"
#include "analog.h"
#include "utilities.h"
#include "lookup.h"

//Packet Commands
#define CMD_STARTUP     0x04
#define CMD_VERSION     0x09
#define CMD_NUMBER      0x0B
#define CMD_SETTIME     0x0C
#define CMD_TOWERMODE   0X0D
#define CMD_PROGBYTE    0x07
#define CMD_READBYTE    0x08
#define CMD_SETPROTOCOL 0x0A
#define CMD_ACCELVALUES 0x10
#define CMD_DOR         0x70


#define THREAD_STACK_SIZE 100

#define NUMBER_CHANNELS 3
#define SAMPLE_NUMBER 16


#define ANALOG_5V 16384
#define ANALOG_0V 0

#define TIMER_SIGNAL_CHANNEL 1
#define TRIP_SIGNAL_CHANNEL 2

static const uint32_t SAMPLE_PERIOD_50HZ = 1250000;
static const uint32_t BAUDRATE = 115200;
static const uint32_t CURRENT_THRESHOLD_QNOTE = 67502;

// static void InitThread(void* pData);
// static void PITSampleThread(void* pData);
// static void PacketThread(void* pData);

typedef enum RELAY_TRAIT
{
  INVERSE,
  VERYINVERSE,
  EXTREMELYINVERSE,
}RELAY_TRAIT;

typedef enum TIMER_STATUS
{
  TIMER_OFF,
  TIMER_ON,
}TIMER_STATUS;

typedef enum CHANNEL_STATUS
{
  NORMAL,
  WAITING_TRIP,
  CHANNEL_TRIPPED,
}CHANNEL_STATUS;

typedef enum TRIP_STATUS
{
  TRIPPED,
  OFF,
}TRIP_STATUS;

typedef enum FAULT_TYPE
{
  NoFault,
  OnePhase,
  TwoPhase,
  ThreePhase,
}FAULT_TYPE;

static TRIP_STATUS TripSignalStatus = OFF;
static FAULT_TYPE FaultType = NoFault;
static RELAY_TRAIT RelayTrait = INVERSE;
static TIMER_STATUS TimerStatus = TIMER_OFF;



// Function Declarations
// bool StartupPacket(void);
// bool VersionPacket(void);
// bool NumberPacket(void);
// bool ModePacket(void);
// bool ReadBytePacket(void);
// bool ProgBytePacket(void);
// bool SetTimePacket(void);
// bool SetProtocol(void);

//Flash Variables
static volatile uint16union_t *NvtowerNumber, /*!< Static variable to store towerNumber */
                              *NvtowerMode;   /*!< Static variable to store tower Mode */
static volatile uint16_t      *NvTripCount;
static volatile uint8_t       *NvRelayTrait; 

static uint16_t TowerNumber = 1204;   /*!< towerNumber of Seamus */
static uint16_t DefaultTowerMode = 1; /*!< default tower Mode */
static uint16_t TripCount;

// volatile TAccelMode Protocol_Mode = ACCEL_POLL; /*!< Initial protocol mode selected */
// TAccelData AccelerometerValues;          /*!< Array to store accelerometer values */

// static TFTMChannel FTM0Channel0;  /*!< Stores the parameters for Channel 0 */

static uint32_t AnalogThreadStacks[NUMBER_CHANNELS][THREAD_STACK_SIZE]__attribute__ ((aligned(0x08)));
static uint32_t InitThreadStack[THREAD_STACK_SIZE] __attribute__ ((aligned(0x08)));
static uint32_t TripThreadStack[THREAD_STACK_SIZE]__attribute__ ((aligned(0x08)));
static uint32_t PITThreadStack[THREAD_STACK_SIZE] __attribute__ ((aligned(0x08)));
static uint32_t PacketThreadStack[THREAD_STACK_SIZE] __attribute__ ((aligned(0x08)));
static uint32_t TransmitThreadStack[THREAD_STACK_SIZE] __attribute__ ((aligned(0x08))); /*!< The stack for the transmit thread. */
static uint32_t ReceiveThreadStack[THREAD_STACK_SIZE] __attribute__ ((aligned(0x08))); /*!< The stack for the receive thread */

// ----------------------------------------
// Thread priorities
// 0 = highest priority
// ----------------------------------------
const uint8_t INIT_THREAD_PRIORITY = 0;
const uint8_t ANALOG_THREAD_PRIORITIES[NUMBER_CHANNELS] = {2, 3, 4};
const uint8_t RECEIVE_THREAD_PRIORITY = 5;
const uint8_t TRANSMIT_THREAD_PRIORITY = 6;
const uint8_t PACKET_THREAD_PRIORITY = 7;
const uint8_t TRIP_THREAD_PRIORITY = 8;
const uint8_t PIT_THREAD_PRIORITY = 9;



/*! @brief Data structure used to pass Analog configuration to a user thread
 *
 */
typedef struct AnalogThreadData
{
  OS_ECB* semaphore;
  uint8_t channelNb;
  
  uint16_t sampleReadings[SAMPLE_NUMBER];
  uint8_t sampleCount;
  int16union_t currentRMS;

  uint8_t zeroCrossingCount;
  uint32_t t0;
  uint32_t t1;

  // TIMER_STATUS timerStatus;
  uint32_t previousTripTime;
  uint32_t tripTime;
  CHANNEL_STATUS channelStatus;
  // bool channelTripped;
  uint32_t timerCount;
} TAnalogThreadData;

/*! @brief Analog thread configuration data
 *
 */
static TAnalogThreadData AnalogThreadData[NUMBER_CHANNELS] =
{
  {
    .semaphore = NULL,
    .channelNb = 0,
    .currentRMS.l = 0,
    .zeroCrossingCount = 0,
    .t0 = 0,
    .t1 = 0,
    // .timerStatus = TIMER_OFF,
    .previousTripTime = 0,
    .tripTime = 0,
    .timerCount = 0,
    .channelStatus = NORMAL,
  },
  {
    .semaphore = NULL,
    .channelNb = 1,
    .currentRMS.l = 0,
    .zeroCrossingCount = 0,
    .t0 = 0,
    .t1 = 0,

    .previousTripTime = 0,
    .tripTime = 0,
    .timerCount = 0,
    .channelStatus = NORMAL,
  },
  {
    .semaphore = NULL,
    .channelNb = 2,
    .currentRMS.l = 0,
    .zeroCrossingCount = 0,
    .t0 = 0,
    .t1 = 0,

    .previousTripTime = 0,
    .tripTime = 0,
    .timerCount = 0,
    .channelStatus = NORMAL,
  }
};

//extern OS_ECB *Data_Ready_Semaphore;  //defining the semaphores to be used that are declared in modules
extern OS_ECB *ReadComplete_Semaphore;
extern OS_ECB *UpdateClock_Semaphore;
extern OS_ECB *PIT_Semaphore;
extern OS_ECB *Trip_Semaphore;
extern OS_ECB *FTM_Semaphore;


/***************************************
 *  Packet Handler
 ***************************************/

/*! @brief  Sends starting values to PC
 *
 *  @return Returns True if success
 */
bool StartupPacket(void)
{
  return ((Packet_Put(CMD_STARTUP, 0, 0, 0)) &&  /* returns the packet for the startup, version and tower number and tower Mode*/
	        (Packet_Put(CMD_VERSION, 'v', 0x01, 0x00)) &&
	        (Packet_Put(CMD_NUMBER, 0x01, NvtowerNumber->s.Lo, NvtowerNumber->s.Hi)) &&
	        (Packet_Put(CMD_TOWERMODE, 0X01, NvtowerMode->s.Lo, NvtowerMode->s.Hi))); // && 
          // (Packet_Put(CMD_SETPROTOCOL, 1, Protocol_Mode, 0)));
}

/*! @brief  Sends tower Version to PC
 *
 *  @return Returns True if success
 */
bool VersionPacket(void)
{
  return Packet_Put(CMD_VERSION, 'v', 0x01, 0x00); /* handles the packet for the tower version Parameter 1 = 'v' Parameter 2= 1 Parameter 3 = 0 from the Tower Serial Guide */
}


/*! @brief NumberPacket
 *  Returns current Tower number if requested or writes new Number into Flash 
 * 
 *  @return BOOL - true if success
 */
bool NumberPacket(void)
{
  bool success = false; /*!< stores success flag */

  if (Packet_Parameter1 == 0x01)        /* if the tower is in get mode it simply returns the current tower number */
  {
    return Packet_Put(CMD_NUMBER, 0x01, NvtowerNumber->s.Lo, NvtowerNumber->s.Hi);  // returns the towerNumber
  }
  else if (Packet_Parameter1 == 0x02) /* if the tower is in set mode it sets the tower number by setting the 1st parameter = 1 2nd parameter to low part of student number and 3 = the hi part of the student number */
  {
    success = Flash_Write16((uint16_t*)NvtowerNumber, Packet_Parameter12);
  }

  return success;  /* if the tower is not in set or get mode it will return false */
}


/*! @brief Returns current Tower mode if requested or writes new Number into Flash 
 *
 *  @return bool -  True if success
 */
bool ModePacket(void)
{
  bool success = false;                 /*!< stores success flag */
  if (Packet_Parameter1 == 0x01)       // get mode
  {
    return Packet_Put(CMD_TOWERMODE, 0x01, NvtowerMode->s.Lo, NvtowerMode->s.Hi);
  }
  else if (Packet_Parameter1 == 0x02) /* if the tower is in set mode it sets the tower mode by setting the 1st parameter = 1 2nd parameter to low part of tower number and 3 = the hi part of the tower number */
  {
    success = Flash_Write16((uint16_t*)NvtowerMode, Packet_Parameter23);
  }

  return success;  /* if the tower is not in set or get mode it will return false */

}

/*! @brief  Writes a Byte to flash
 *
 *  @return Returns True if success
 */
bool ProgBytePacket(void)
{
  if ((Packet_Parameter1 < 0) || (Packet_Parameter1 > 8)) // Checks to see if the parameter is within the limits
  {
    return false;  // if the parameters is outside of the limits it will return 0
  }

  if (Packet_Parameter1 == 0x08) // 0x08 erases the flash
  {
    return Flash_Erase(); // calls the flash erase function
  }

  return Flash_Write8((uint8_t *)(FLASH_DATA_START + Packet_Parameter1), Packet_Parameter3); // Writes the data in parameter 3 at the address starting at flash data started offsetted by pac
}


/*! @brief Reads byte from memory then returns to PC
 *
 *  @return Returns True if success
 */
bool ReadBytePacket(void)
{
  // if packet_parameter is in range then it will return the parameters
  if ((Packet_Parameter1 >= 0) || (Packet_Parameter1 <= 7))
  {
    return (Packet_Put(CMD_READBYTE, Packet_Parameter1, 0x00, _FB(FLASH_DATA_START + Packet_Parameter1))); // data is accessed via started at Flash_data_start and offsetting by PacketParameter1
  }

  return false; // if the parameter is outside of the range then the function will return false;
}


/*! @brief Sets RTC clock time
 *
 *  @return bool -  True if success
 */
bool SetTimePacket(void)
{
  if ((Packet_Parameter1 >= 0) || (Packet_Parameter1 <= 23) && (Packet_Parameter2 >= 0) || (Packet_Parameter2 <= 59) &&
      (Packet_Parameter3 >= 0) || (Packet_Parameter3 <= 59))
  {
//    RTC_Set(Packet_Parameter1, Packet_Parameter2, Packet_Parameter3);
    return true;
  }
  else
  {
      return false;  // if the parameters are not within the time limits then return false
  }
}


bool SetProtocol(void)
{
  return false;
}


void InterrigateDOR(void)
{
  switch (Packet_Parameter1)
  {
    case 0: //IDMT Characteristic GET/SET
      if (Packet_Parameter2 == 1)
      {
        /* Get */
        Packet_Put(CMD_DOR, Packet_Parameter1, RelayTrait, 0);
      }
      else if (Packet_Parameter2 == 2)
      {
        /* Set */
        RelayTrait = Packet_Parameter3;
      }
      break;
      
      

    case 1://Get currents
      for (int i = 0; i < NUMBER_CHANNELS; i++)
      {
        /* code */
        Packet_Put(CMD_DOR, AnalogThreadData[i].channelNb, (AnalogThreadData[i].currentRMS.s.Lo * (2^16)), AnalogThreadData[i].currentRMS.s.Hi);//Need to configure for current Type        
      }
      break;
      

    case 2: //Get Frequency

    case 3: //Get # times tripped

    case 4: //Get Fault Type
      break;
    default:
      break;
  }
}

/*! @brief  Function to handle incoming packets 
 *
 */
void HandlePacket(void)
{
  bool success = false;   /*!< holds whether it was a success of failure of the packet handler */
  bool request  = false;  /*!< holds if an acknowledge request has happened */

  LEDs_On(LED_BLUE); // Turn on blue LED

  // FTM0Channel0.ioType.inputDetection = TIMER_OUTPUT_HIGH; // Start FTM0 timer - channel 0
  // FTM_StartTimer(&FTM0Channel0);

  if ( PACKET_ACK_MASK & Packet_Command ) /* Looks to see if the ack bit is set */
  {
    request = true; /* sets the request to true */
    Packet_Command &= 0x7F; /* takes the top bit off the command byte to ignore the ACK bit */
  }

  switch (Packet_Command)   /* checks to see which type of packet it is and handles it accordingly */
  {
    case CMD_STARTUP:
      StartupPacket();
      success = true;
      break;
    case CMD_VERSION:
      VersionPacket();
      success = true;
      break;
    case CMD_NUMBER:
      NumberPacket();
      success = true;
      break;
    case CMD_TOWERMODE:
      ModePacket();
      success = true;
      break;
    case CMD_PROGBYTE:
      ProgBytePacket();
      success = true;
      break;
    case CMD_READBYTE:
      ReadBytePacket();
      success = true;
      break;
    case CMD_SETTIME:
      SetTimePacket();
      success = true;
      break;
    case CMD_SETPROTOCOL:
      SetProtocol();
      success = true;
      break;
    case CMD_DOR:
      success = true;
      break;
    default:
      success = false;
      break;
  }
  /* see if the handing of the packet was a success and an ack packet was requested if it is correct then set the ack bit to 1
  *  if the packet has failed and ack was requested set the ack to indicated a nak then return the ack packet back to the tower */
  if(request)
  {
    if (success)
      Packet_Command |= PACKET_ACK_MASK;  /* sets the ack bit if */
    else
      Packet_Command &= ~PACKET_ACK_MASK; /* clears the ack bit */

    Packet_Put(Packet_Command, Packet_Parameter1, Packet_Parameter2, Packet_Parameter3); /* send the ack nak packet back */
  }
}



/***************************************
 *  Utility Functions
 ***************************************/
bool FrequencyInterpolation(TAnalogThreadData* AnalogThreadData, uint8_t sampleCount)
{
  uint32_t period_ns, samplePeriod;
  if(sampleCount > 0)
  {
    
    if (AnalogThreadData->sampleReadings[sampleCount] > 0 && AnalogThreadData->sampleReadings[sampleCount - 1])
    {
      if (AnalogThreadData->zeroCrossingCount== 0)
      {
        //Start PIT Timer at Max Value then record first value as reference
        PIT_Timer_Start();
        AnalogThreadData->t0 = PIT_Get(1); //Nanoseconds

        //Flag as first crossing
        AnalogThreadData->zeroCrossingCount = 1;
      }
      else if (AnalogThreadData->zeroCrossingCount == 1)
      {
        AnalogThreadData->t1 = PIT_Get(1);

        period_ns = (AnalogThreadData->t1 - AnalogThreadData->t0);
        AnalogThreadData->zeroCrossingCount = 0; //Reset Zero Crossing

        if (period_ns > 171798691800)
        {
          return false; //Invalid period, restart
        }
        samplePeriod = period_ns / 16;
        PIT_Set(samplePeriod, true, 0); //Reset sampleFrequency counter
      }       
    }    
  }
  return true;
}

void TimerSignal(TAnalogThreadData* analogData)
{
  //Calculate Timer
  uint32_t tripTimeMillis = TimingLookup(CurrentQ8toMilli(analogData->currentRMS), RelayTrait);
  uint32_t timingDifference;
  PIT_Set(1000,TRUE,1); //Start PIT for 1 microsecond period

  //if timer hasn't started yet 
  if(TimerStatus == TIMER_OFF)
  {
    Analog_Put(TIMER_SIGNAL_CHANNEL, ANALOG_5V);
    TimerStatus = TIMER_ON;
    analogData->previousTripTime = tripTimeMillis;
    analogData->channelStatus = WAITING_TRIP; 
  }
  else if (TimerStatus == TIMER_ON)
  {
    if(tripTimeMillis > analogData->previousTripTime)
    {
      //Get difference then Set pit without Reset
      analogData->previousTripTime = (tripTimeMillis - analogData->previousTripTime);
    }
  }
}

void LoadStartingValues(void)
{
    if(Flash_AllocateVar((void*)&NvtowerNumber, sizeof(*NvtowerNumber)))
    {
      if (NvtowerNumber->l == 0xFFFF) //If towerNumber is not yet programmed, save it to flash// This points to address in the flash memory where the data will be, using the void pointer means that no the variable type can be changed without a cast
      {
        Flash_Write16((uint16_t*)NvtowerNumber, TowerNumber); // This function writes to the flash memory using the flash write function
      }
    }

    if(Flash_AllocateVar((void*)&NvtowerMode, sizeof(*NvtowerMode)))// same code as above except it is to set the tower mode to the flash memory// Again using teh void pointer means that no future type casting is needed.
    {
      Flash_Write16((uint16_t* )NvtowerMode, DefaultTowerMode);
    }

    //Flash for DOC variables
    if(Flash_AllocateVar((void*)&NvTripCount, sizeof(*NvTripCount)))
    {
      if (*NvTripCount == 0xFFFF) //If blank
      {
        Flash_Write16((uint16_t*)NvTripCount, 0);
      }
    }

    if (Flash_AllocateVar((void*)&NvRelayTrait, sizeof(uint8_t)))
    {
      if (*NvRelayTrait == 0xFF) //If blank
      {
        Flash_Write8((uint8_t*)NvRelayTrait, RelayTrait); //Write the default Characteristic to flash
      }
    }
}

/***************************************
 *  THREADS
 ***************************************/

/*! @brief <Description>
 *
 *  @param (param) 
 */
static void InitThread(void* pData)
{
  for (;;)
  {
    OS_DisableInterrupts();


    if (Analog_Init(CPU_BUS_CLK_HZ) &&
        Packet_Init(BAUDRATE, CPU_BUS_CLK_HZ) &&
        LEDs_Init() &&
        Flash_Init() &&
        // FTM_Init() &&
        PIT_Init(CPU_BUS_CLK_HZ)) 
    {
      LEDs_On(LED_ORANGE); // Initialising LED
    }

    LoadStartingValues();

    //Create Analog Semaphore
    // Generate the global analog semaphores
    for (uint8_t analogNb = 0; analogNb < NUMBER_CHANNELS; analogNb++)
      AnalogThreadData[analogNb].semaphore = OS_SemaphoreCreate(0);

    PIT_Set(SAMPLE_PERIOD_50HZ, true, 0); //Activates PIT for Sampling
    OS_EnableInterrupts();



    StartupPacket(); // Send the startup packets


    OS_ThreadDelete(OS_PRIORITY_SELF); // Thread can't be accessed again as this is the initial thread
   }
}


/*! @brief Thread function for Packet
 *  If the PacketGet function is called then handle the packet
 */
static void PacketThread(void* pData)
{
  for (;;)
  {
    if (Packet_Get())
    {
      HandlePacket();
    }
  }
}

/*! @brief Thread function for PIT
 *  Triggers 16 times a input cycle
 */
static void PITSampleThread(void* pData) //Use PIT for the one second timing
{
  for(;;)
  {
    OS_SemaphoreWait(PIT_Semaphore,0);

    for (int i = 0; i < NUMBER_CHANNELS; i++)
    {
      (void)OS_SemaphoreSignal(AnalogThreadData[i].semaphore);
    } 
  }
}

/*! @brief AnalogThread
 *
 *  @param (param) 
 */
void AnalogThread(void* pData)
{
  // Make the code easier to read by giving a name to the typecast'ed pointer
  #define analogData ((TAnalogThreadData*)pData)
  #define sampleCount analogData->sampleCount
  uint16_t adcReading = 0;

  for(;;)
  {
    //Trigger on every sample rate 
    (void)OS_SemaphoreWait(analogData->semaphore, 0);
    
    //Sample input
    Analog_Get(analogData->channelNb, &adcReading);
    analogData->sampleReadings[sampleCount] = adcReading;

    //When samples count to 16 
    if(sampleCount == SAMPLE_NUMBER)
    {
      analogData->currentRMS = VoltageRMS_To_CurrentQ8((Newton_RMS(AnalogThreadData->sampleReadings)));

      if (analogData->currentRMS.l >= CURRENT_THRESHOLD_QNOTE)
      {
        //Executue Trip
        TimerSignal(analogData);
      }
      else
      {
        if (analogData->channelStatus == WAITING_TRIP)
        {
          TimerStatus = TIMER_OFF;
          analogData->channelStatus = NORMAL;
          // PIT_Enable(false, 1); //Deactivate PIT
        }
      }
    }
    sampleCount++;
  }
}

/*! @brief <Description>
 *
 *  @param (param) 
 *  @return <return type>
 */
void TripThread(void* pData)
{
  uint8_t phasesTripped = 0;

  for(;;)
  {
    OS_SemaphoreWait(Trip_Semaphore, 0); //Wait on Trip Timer

    if (TripSignalStatus == TRIPPED) //Check if Signal is Tripped then test if still active
    {
      for (int i = 0; i < NUMBER_CHANNELS; i++)
      { 
        phasesTripped &= AnalogThreadData[i].channelStatus;
      }
      if (phasesTripped == 0)
      {
        Analog_Put(TRIP_SIGNAL_CHANNEL, ANALOG_0V);
        TripSignalStatus = OFF;
      }
    }  

    //Trip Channel
    if (TripSignalStatus == OFF) //Ignore If Already Tripped
    {
      for (uint8_t i = 0; i < NUMBER_CHANNELS; i++)
      {
        if (AnalogThreadData[i].channelStatus == WAITING_TRIP)
        {
          AnalogThreadData[i].timerCount++;
          if (AnalogThreadData[i].timerCount >= AnalogThreadData[i].tripTime)
          {
            Analog_Put(TRIP_SIGNAL_CHANNEL, ANALOG_5V); //Write Trip Signal to DAC
            Analog_Put(TIMER_SIGNAL_CHANNEL, ANALOG_0V); //Turn Off Timer Signal?
            TimerStatus = TIMER_OFF;

            TripSignalStatus = TRIPPED; //Set Global Trip Status
            AnalogThreadData[i].channelStatus = CHANNEL_TRIPPED;      
            phasesTripped++;


            //Increment count and write to flash
            TripCount++; 
            (void)Flash_Write16((uint16_t*)NvTripCount, TripCount);
            FaultType = phasesTripped;
          }
        }  
      }
    }
  }
}


/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  OS_ERROR error;

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */

  OS_Init(CPU_CORE_CLK_HZ, false);
  
  //Create Initalisation Thread
  error = OS_ThreadCreate(InitThread, 
          NULL, 
          &InitThreadStack[THREAD_STACK_SIZE - 1], 
          INIT_THREAD_PRIORITY);

  error = OS_ThreadCreate(TripThread, 
                          NULL, 
                          &TripThreadStack[THREAD_STACK_SIZE - 1], 
                          TRIP_THREAD_PRIORITY); 

  // Create threads for analog loopback channels
  for (uint8_t threadNb = 0; threadNb < NUMBER_CHANNELS; threadNb++)
  {
    error = OS_ThreadCreate(AnalogThread,
                            &AnalogThreadData[threadNb],
                            &AnalogThreadStacks[threadNb][THREAD_STACK_SIZE - 1],
                            ANALOG_THREAD_PRIORITIES[threadNb]);
  }

  error = OS_ThreadCreate(ReceiveThread, 
                          NULL, 
                          &ReceiveThreadStack[THREAD_STACK_SIZE-1], 
                          RECEIVE_THREAD_PRIORITY);

  error = OS_ThreadCreate(TransmitThread, 
                          NULL, 
                          &TransmitThreadStack[THREAD_STACK_SIZE - 1], 
                          TRANSMIT_THREAD_PRIORITY);

  error = OS_ThreadCreate(PITSampleThread, 
                          NULL, 
                          &PITThreadStack[THREAD_STACK_SIZE - 1], 
                          PIT_THREAD_PRIORITY);

  error = OS_ThreadCreate(PacketThread, 
                          NULL, 
                          &PacketThreadStack[THREAD_STACK_SIZE - 1], 
                          PACKET_THREAD_PRIORITY);


  OS_Start();

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/

}/*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/


/* END main */
/*!
** @}
*/
/*/
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
